/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import authService from './components/api-authorization/AuthorizeService';

export class OidcConfigurationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getClientRequestParameters(clientId: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/_configuration/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetClientRequestParameters(_response);
        });
    }

    protected processGetClientRequestParameters(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class TransactionsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    parseCsv(userId: string | null, body: ParseCsvModel): Promise<ParseCsvResponse> {
        let url_ = this.baseUrl + "/api/users/{userId}/transactions/parse";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processParseCsv(_response);
        });
    }

    protected processParseCsv(response: Response): Promise<ParseCsvResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParseCsvResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParseCsvResponse>(<any>null);
    }
}

export class ParseCsvResponse implements IParseCsvResponse {
    transactions!: TransactionModel[] | undefined;

    constructor(data?: IParseCsvResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["transactions"])) {
                this.transactions = [] as any;
                for (let item of _data["transactions"])
                    this.transactions!.push(TransactionModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ParseCsvResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ParseCsvResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.transactions)) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ParseCsvResponse {
        const json = this.toJSON();
        let result = new ParseCsvResponse();
        result.init(json);
        return result;
    }
}

export interface IParseCsvResponse {
    transactions: TransactionModel[] | undefined;
}

export class TransactionModel implements ITransactionModel {
    date!: Date;
    descriptions!: string[] | undefined;
    amount!: number;
    currency!: string | undefined;
    accountNumber!: string | undefined;
    duplicateIds!: number[] | undefined;
    isLikelyDuplicate!: boolean;

    constructor(data?: ITransactionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["descriptions"])) {
                this.descriptions = [] as any;
                for (let item of _data["descriptions"])
                    this.descriptions!.push(item);
            }
            this.amount = _data["amount"];
            this.currency = _data["currency"];
            this.accountNumber = _data["accountNumber"];
            if (Array.isArray(_data["duplicateIds"])) {
                this.duplicateIds = [] as any;
                for (let item of _data["duplicateIds"])
                    this.duplicateIds!.push(item);
            }
            this.isLikelyDuplicate = _data["isLikelyDuplicate"];
        }
    }

    static fromJS(data: any): TransactionModel {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.descriptions)) {
            data["descriptions"] = [];
            for (let item of this.descriptions)
                data["descriptions"].push(item);
        }
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        data["accountNumber"] = this.accountNumber;
        if (Array.isArray(this.duplicateIds)) {
            data["duplicateIds"] = [];
            for (let item of this.duplicateIds)
                data["duplicateIds"].push(item);
        }
        data["isLikelyDuplicate"] = this.isLikelyDuplicate;
        return data; 
    }

    clone(): TransactionModel {
        const json = this.toJSON();
        let result = new TransactionModel();
        result.init(json);
        return result;
    }
}

export interface ITransactionModel {
    date: Date;
    descriptions: string[] | undefined;
    amount: number;
    currency: string | undefined;
    accountNumber: string | undefined;
    duplicateIds: number[] | undefined;
    isLikelyDuplicate: boolean;
}

export class ParseCsvModel implements IParseCsvModel {
    bank!: string | undefined;
    csv!: string | undefined;
    duplicates!: boolean;

    constructor(data?: IParseCsvModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bank = _data["bank"];
            this.csv = _data["csv"];
            this.duplicates = _data["duplicates"];
        }
    }

    static fromJS(data: any): ParseCsvModel {
        data = typeof data === 'object' ? data : {};
        let result = new ParseCsvModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bank"] = this.bank;
        data["csv"] = this.csv;
        data["duplicates"] = this.duplicates;
        return data; 
    }

    clone(): ParseCsvModel {
        const json = this.toJSON();
        let result = new ParseCsvModel();
        result.init(json);
        return result;
    }
}

export interface IParseCsvModel {
    bank: string | undefined;
    csv: string | undefined;
    duplicates: boolean;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export class BaseClient {
    
    protected transformOptions(options: RequestInit): RequestInit {
        console.log('Transforming options');
        const token = authService.getAccessToken();
        if (token) {
            if (options.headers) {
                console.log('Appending authorization header');
                (options.headers as Headers).append('Authorization', `Bearer ${token}`);
            }
        }
        return options;

    }
}